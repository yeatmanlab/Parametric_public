prediction
test
psychometrics$group2 = ifelse(psychometrics$group == "Above Average","1",
ifelse(psychometrics$group == "Below Average", "2", "3")
psychometrics_qda <- psychometrics %>%
group_by(subject_id)%>%
summarise(slope = mean(slope),
lapse = mean(lapse),
guess = mean(guess),
group2 = unique(group2))
psychometrics_qda$row = seq(1:nrow(psychometrics_qda))
accuracy <- numeric(nrow(psychometrics_qda))
prediction <- character((nrow(psychometrics_qda)))
for(i in 1:nrow(psychometrics_qda)){
train <- subset(psychometrics_qda, row != i)
test <- subset(psychometrics_qda, row == i)
lda_model <- qda(group2 ~ slope + lapse + guess, train)
prediction[i] <- predict(lda_model, test)$class
accuracy[i] = prediction[i] == test$group2
}
mean(accuracy)
df_qda <- data.frame(Prediction = prediction, Value = psychometrics_qda$group2)
table(df_qda)
psychometrics$group2 = ifelse(psychometrics$group == "Above Average","1",
ifelse(psychometrics$group == "Below Average", "2", "3"))
psychometrics_qda <- psychometrics %>%
group_by(subject_id)%>%
summarise(slope = mean(slope),
lapse = mean(lapse),
guess = mean(guess),
group2 = unique(group2))
psychometrics_qda$row = seq(1:nrow(psychometrics_qda))
accuracy <- numeric(nrow(psychometrics_qda))
prediction <- character((nrow(psychometrics_qda)))
for(i in 1:nrow(psychometrics_qda)){
train <- subset(psychometrics_qda, row != i)
test <- subset(psychometrics_qda, row == i)
lda_model <- qda(group2 ~ slope + lapse + guess, train)
prediction[i] <- predict(lda_model, test)$class
accuracy[i] = prediction[i] == test$group2
}
mean(accuracy)
df_qda <- data.frame(Prediction = prediction, Value = psychometrics_qda$group2)
table(df_qda)
psychometrics$group2 = ifelse(psychometrics$group == "Above Average","1",
ifelse(psychometrics$group == "Below Average", "2", "3"))
psychometrics_qda <- psychometrics %>%
group_by(subject_id)%>%
subset(group2 != "2")
summarise(slope = mean(slope),
lapse = mean(lapse),
guess = mean(guess),
group2 = unique(group2))
psychometrics_qda$row = seq(1:nrow(psychometrics_qda))
accuracy <- numeric(nrow(psychometrics_qda))
prediction <- character((nrow(psychometrics_qda)))
for(i in 1:nrow(psychometrics_qda)){
train <- subset(psychometrics_qda, row != i)
test <- subset(psychometrics_qda, row == i)
lda_model <- qda(group2 ~ slope + lapse + guess, train)
prediction[i] <- predict(lda_model, test)$class
accuracy[i] = prediction[i] == test$group2
}
mean(accuracy)
df_qda <- data.frame(Prediction = prediction, Value = psychometrics_qda$group2)
table(df_qda)
prediction
test
test$group2
psychometrics$group2 = ifelse(psychometrics$group == "Above Average","1",
ifelse(psychometrics$group == "Below Average", "2", "3"))
psychometrics_qda <- psychometrics %>%
group_by(subject_id)%>%
subset(group2 != "2") %>%
summarise(slope = mean(slope),
lapse = mean(lapse),
guess = mean(guess),
group2 = unique(group2))
psychometrics_qda$row = seq(1:nrow(psychometrics_qda))
accuracy <- numeric(nrow(psychometrics_qda))
prediction <- character((nrow(psychometrics_qda)))
for(i in 1:nrow(psychometrics_qda)){
train <- subset(psychometrics_qda, row != i)
test <- subset(psychometrics_qda, row == i)
lda_model <- qda(group2 ~ slope + lapse + guess, train)
prediction[i] <- predict(lda_model, test)$class
accuracy[i] = prediction[i] == test$group2
}
mean(accuracy)
test
psychometrics_qda$group2
train$group2
prediction
psychometrics$group2 = ifelse(psychometrics$group == "Above Average","1",
ifelse(psychometrics$group == "Dyslexic", "2", "3"))
psychometrics_qda <- psychometrics %>%
group_by(subject_id)%>%
subset(group2 != "3") %>%
summarise(slope = mean(slope),
lapse = mean(lapse),
guess = mean(guess),
group2 = unique(group2))
psychometrics_qda$row = seq(1:nrow(psychometrics_qda))
accuracy <- numeric(nrow(psychometrics_qda))
prediction <- character((nrow(psychometrics_qda)))
for(i in 1:nrow(psychometrics_qda)){
train <- subset(psychometrics_qda, row != i)
test <- subset(psychometrics_qda, row == i)
lda_model <- qda(group2 ~ slope + lapse + guess, train)
prediction[i] <- predict(lda_model, test)$class
accuracy[i] = prediction[i] == test$group2
}
mean(accuracy)
df_qda <- data.frame(Prediction = prediction, Value = psychometrics_qda$group2)
table(df_qda)
3/13
10+13/(13+16)
(10+13)/(13+16)
library(dplyr)
library(ggplot2)
library(reshape2)
psychometrics <- read.csv("../cleaned_psychometrics.csv")
params <- psychometrics[,5:7]
PCA<- prcomp(params, scale=TRUE)
psychometrics <- cbind(psychometrics, PCA$x)
bio <- read.csv("../cleaned_data.csv")
columns <- c("subject_id", "wj_lwid_ss", "wj_wa_ss", "twre_pde_ss", "twre_swe_ss",
"ctopp_pa", "ctopp_pm", "ctopp_rapid")
group_table <- unique(bio[columns])
rm(list = ls())
library(dplyr)
library(ggplot2)
library(reshape2)
psychometrics <- read.csv("../cleaned_psychometrics.csv")
params <- psychometrics[,5:7]
PCA<- prcomp(params, scale=TRUE)
psychometrics <- cbind(psychometrics, PCA$x)
bio <- read.csv("../cleaned_data.csv")
columns <- c("subject_id", "wj_lwid_ss", "wj_wa_ss", "twre_pde_ss", "twre_swe_ss",
"ctopp_pa", "ctopp_pm", "ctopp_rapid")
group_table <- unique(bio[columns])
use <- merge(group_table, psychometrics, all.x=TRUE, all.y=FALSE)
df_sum <- sum
get_cors_mean <- function(dsub){
# dsub <- df_sum
wj_wa_ss <-   cor.test(dsub$mean_slope, dsub$wj_wa_ss)
wj_wa_ss.r <- wj_wa_ss$estimate
wj_wa_ss.p <- wj_wa_ss$p.value
wj_lwid_ss <-   cor.test(dsub$mean_slope, dsub$wj_lwid_ss)
wj_lwid_ss.r <- wj_lwid_ss$estimate
wj_lwid_ss.p <- wj_lwid_ss$p.value
twre_swe <-   cor.test(dsub$mean_slope, dsub$twre_swe)
twre_swe.r <- twre_swe$estimate
twre_swe.p <- twre_swe$p.value
twre_pde <-   cor.test(dsub$mean_slope, dsub$twre_pde)
twre_pde.r <- twre_pde$estimate
twre_pde.p <- twre_pde$p.value
ctopp_pa <-   cor.test(dsub$mean_slope, dsub$ctopp_pa)
ctopp_pa.r <- ctopp_pa$estimate
ctopp_pa.p <- ctopp_pa$p.value
ctopp_pm <-   cor.test(dsub$mean_slope, dsub$ctopp_pm)
ctopp_pm.r <- ctopp_pm$estimate
ctopp_pm.p <- ctopp_pm$p.value
ctopp_rapid <-   cor.test(dsub$mean_slope, dsub$ctopp_rapid)
ctopp_rapid.r <- ctopp_rapid$estimate
ctopp_rapid.p <- ctopp_rapid$p.value
output <- data.frame(wj_wa_ss.r, wj_wa_ss.p,
wj_lwid_ss.r, wj_lwid_ss.p,
twre_swe.r, twre_swe.p,
twre_pde.r, twre_pde.p,
ctopp_pa.r, ctopp_pa.p,
ctopp_pm.r, ctopp_pm.p,
ctopp_rapid.r, ctopp_rapid.p,
num_obs = nrow(dsub))
return(output)
}
get_cors_lapse <- function(dsub){
# dsub <- df_sum
wj_wa_ss <-   cor.test(dsub$mean_lapse, dsub$wj_wa_ss)
wj_wa_ss.r <- wj_wa_ss$estimate
wj_wa_ss.p <- wj_wa_ss$p.value
wj_lwid_ss <-   cor.test(dsub$mean_lapse, dsub$wj_lwid_ss)
wj_lwid_ss.r <- wj_lwid_ss$estimate
wj_lwid_ss.p <- wj_lwid_ss$p.value
twre_swe <-   cor.test(dsub$mean_lapse, dsub$twre_swe)
twre_swe.r <- twre_swe$estimate
twre_swe.p <- twre_swe$p.value
twre_pde <-   cor.test(dsub$mean_lapse, dsub$twre_pde)
twre_pde.r <- twre_pde$estimate
twre_pde.p <- twre_pde$p.value
ctopp_pa <-   cor.test(dsub$mean_lapse, dsub$ctopp_pa)
ctopp_pa.r <- ctopp_pa$estimate
ctopp_pa.p <- ctopp_pa$p.value
ctopp_pm <-   cor.test(dsub$mean_lapse, dsub$ctopp_pm)
ctopp_pm.r <- ctopp_pm$estimate
ctopp_pm.p <- ctopp_pm$p.value
ctopp_rapid <-   cor.test(dsub$mean_lapse, dsub$ctopp_rapid)
ctopp_rapid.r <- ctopp_rapid$estimate
ctopp_rapid.p <- ctopp_rapid$p.value
output <- data.frame(wj_wa_ss.r, wj_wa_ss.p,
wj_lwid_ss.r, wj_lwid_ss.p,
twre_swe.r, twre_swe.p,
twre_pde.r, twre_pde.p,
ctopp_pa.r, ctopp_pa.p,
ctopp_pm.r, ctopp_pm.p,
ctopp_rapid.r, ctopp_rapid.p,
num_obs = nrow(dsub))
return(output)
}
get_cors_P1 <- function(dsub){
# dsub <- df_sum
wj_wa_ss <-   cor.test(dsub$PC1, dsub$wj_wa_ss)
wj_wa_ss.r <- wj_wa_ss$estimate
wj_wa_ss.p <- wj_wa_ss$p.value
wj_lwid_ss <-   cor.test(dsub$PC1, dsub$wj_lwid_ss)
wj_lwid_ss.r <- wj_lwid_ss$estimate
wj_lwid_ss.p <- wj_lwid_ss$p.value
twre_swe <-   cor.test(dsub$PC1, dsub$twre_swe)
twre_swe.r <- twre_swe$estimate
twre_swe.p <- twre_swe$p.value
twre_pde <-   cor.test(dsub$PC1, dsub$twre_pde)
twre_pde.r <- twre_pde$estimate
twre_pde.p <- twre_pde$p.value
ctopp_pa <-   cor.test(dsub$PC1, dsub$ctopp_pa)
ctopp_pa.r <- ctopp_pa$estimate
ctopp_pa.p <- ctopp_pa$p.value
ctopp_pm <-   cor.test(dsub$PC1, dsub$ctopp_pm)
ctopp_pm.r <- ctopp_pm$estimate
ctopp_pm.p <- ctopp_pm$p.value
ctopp_rapid <-   cor.test(dsub$PC1, dsub$ctopp_rapid)
ctopp_rapid.r <- ctopp_rapid$estimate
ctopp_rapid.p <- ctopp_rapid$p.value
output <- data.frame(wj_wa_ss.r, wj_wa_ss.p,
wj_lwid_ss.r, wj_lwid_ss.p,
twre_swe.r, twre_swe.p,
twre_pde.r, twre_pde.p,
ctopp_pa.r, ctopp_pa.p,
ctopp_pm.r, ctopp_pm.p,
ctopp_rapid.r, ctopp_rapid.p,
num_obs = nrow(dsub))
return(output)
}
df_sum <- use %>%
group_by(subject_id, continuum, paradigm)%>%
summarise(mean_slope = mean(slope),
mean_hi_asymp = mean(hi_asymp),
mean_lo_asymp = mean(lo_asymp),
mean_lapse = mean((hi_asymp+lo_asymp)/2),
PC1 = mean(PC1),
wj_wa_ss = unique(wj_wa_ss),
wj_lwid_ss = unique(wj_lwid_ss),
twre_swe = unique(twre_swe_ss),
twre_pde = unique(twre_pde_ss),
ctopp_pa = unique(ctopp_pa),
ctopp_pm = unique(ctopp_pm),
ctopp_rapid = unique(ctopp_rapid))
df_cors_mean <- df_sum %>%
group_by(continuum, paradigm) %>%
do(., get_cors_mean(.)) %>%
mutate(type = "Slope")
df_cors_lapse <- df_sum %>%
group_by(continuum, paradigm) %>%
do(., get_cors_lapse(.)) %>%
mutate(type = "Lapse")
df_cors_PC1<- df_sum %>%
group_by(continuum, paradigm) %>%
do(., get_cors_P1(.)) %>%
mutate(type = "PC1")
df_cors <- rbind(df_cors_mean, df_cors_lapse, df_cors_PC1
)
cor_mat_r <- df_cors %>%
melt() %>%
subset(!(grepl("\\.p", variable) | grepl("obs", variable))) %>%
mutate(label = paste(continuum,'\n', paradigm))
var <- colsplit(cor_mat_r$variable, "\\.", c("test","measure"))
cor_mat_r$test <- var$test
cor_mat_r$measure<- var$measure
cor_mat_r$variable <- NULL
cor_mat_p <- df_cors %>%
melt() %>%
subset(!(grepl("\\.r", variable) | grepl("obs", variable))) %>%
mutate(label = paste(continuum,'\n', paradigm))
var <- colsplit(cor_mat_p$variable, "\\.", c("test","measure"))
cor_mat_p$test <- var$test
cor_mat_p$measure<- var$measure
cor_mat_p$variable <- NULL
cor_mat_r$type <- factor(cor_mat_r$type, levels = c("Slope","Lapse","PC1"))
p_sig <- subset(cor_mat_p, value < 0.05)
p_sig$type <- factor(p_sig$type, levels = c("Slope", "Lapse", "PC1"))
px <- ggplot(data = cor_mat_r, aes(x=label, y=test, fill=value)) +
geom_tile(colour = "white") +
geom_point(data = p_sig, aes(x=label, y=test),
shape = 42, size = 10, colour = "white")+
facet_wrap(~type)+
scale_fill_distiller(palette = "PRGn", name = "Correlation")+
xlab("")+
ylab("")+
theme_minimal()+
scale_y_discrete(labels=c("WJ\n Real Word","WJ\n Pseudoword",
"TOWRE\n Real Word", "TOWRE\n Pseudoword",
"CTOPP\n Phonological\n Awareness",
"CTOPP\n Phonological\n Memory", "CTOPP\n Rapid Symbol\n Naming"))+
theme(strip.text.x = element_text(size = 24),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size=12))+
guides(fill= guide_colorbar(barheight=12))
px
12*7
0.05/84
1-(1-0.05)^(1/84)
p_sig <- subset(cor_mat_p, value < 0.001)
p_sig$type <- factor(p_sig$type, levels = c("Slope", "Lapse", "PC1"))
px <- ggplot(data = cor_mat_r, aes(x=label, y=test, fill=value)) +
geom_tile(colour = "white") +
geom_point(data = p_sig, aes(x=label, y=test),
shape = 42, size = 10, colour = "white")+
facet_wrap(~type)+
scale_fill_distiller(palette = "PRGn", name = "Correlation")+
xlab("")+
ylab("")+
theme_minimal()+
scale_y_discrete(labels=c("WJ\n Real Word","WJ\n Pseudoword",
"TOWRE\n Real Word", "TOWRE\n Pseudoword",
"CTOPP\n Phonological\n Awareness",
"CTOPP\n Phonological\n Memory", "CTOPP\n Rapid Symbol\n Naming"))+
theme(strip.text.x = element_text(size = 24),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size=12))+
guides(fill= guide_colorbar(barheight=12))
px
w = 16
h = 7
ggsave("./Figures/pairwise_corr.eps", px, device = cairo_ps, width = w, height = h)
ggsave("./Figures/pairwise_corr.png", px,  width = w, height = h)
ggsave("./Figures/pairwise_corr.tiff", px,  width = w, height = h, dpi = 300)
p_sig <- subset(cor_mat_p, value < 0.006)
p_sig$type <- factor(p_sig$type, levels = c("Slope", "Lapse", "PC1"))
px <- ggplot(data = cor_mat_r, aes(x=label, y=test, fill=value)) +
geom_tile(colour = "white") +
geom_point(data = p_sig, aes(x=label, y=test),
shape = 42, size = 10, colour = "white")+
facet_wrap(~type)+
scale_fill_distiller(palette = "PRGn", name = "Correlation")+
xlab("")+
ylab("")+
theme_minimal()+
scale_y_discrete(labels=c("WJ\n Real Word","WJ\n Pseudoword",
"TOWRE\n Real Word", "TOWRE\n Pseudoword",
"CTOPP\n Phonological\n Awareness",
"CTOPP\n Phonological\n Memory", "CTOPP\n Rapid Symbol\n Naming"))+
theme(strip.text.x = element_text(size = 24),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size=12))+
guides(fill= guide_colorbar(barheight=12))
px
p_sig <- subset(cor_mat_p, value < 0.0006)
p_sig$type <- factor(p_sig$type, levels = c("Slope", "Lapse", "PC1"))
px <- ggplot(data = cor_mat_r, aes(x=label, y=test, fill=value)) +
geom_tile(colour = "white") +
geom_point(data = p_sig, aes(x=label, y=test),
shape = 42, size = 10, colour = "white")+
facet_wrap(~type)+
scale_fill_distiller(palette = "PRGn", name = "Correlation")+
xlab("")+
ylab("")+
theme_minimal()+
scale_y_discrete(labels=c("WJ\n Real Word","WJ\n Pseudoword",
"TOWRE\n Real Word", "TOWRE\n Pseudoword",
"CTOPP\n Phonological\n Awareness",
"CTOPP\n Phonological\n Memory", "CTOPP\n Rapid Symbol\n Naming"))+
theme(strip.text.x = element_text(size = 24),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size=12))+
guides(fill= guide_colorbar(barheight=12))
px
rm(list = ls())
library(dplyr)
library(tidyr)
library(stringr)
setwd("..")
response_df <- data.frame()
data_dir <- file.path("Exp", "Data")
raw_files <- list.files(path=data_dir)
raw_files <- raw_files[!grepl("Motion", raw_files)]
raw_files <- raw_files[!grepl("nnn", raw_files)]
raw_files <- raw_files[!grepl(".mat", raw_files)]
raw_files <- raw_files[!grepl("HDDM", raw_files)]
raw_files <- raw_files[!grepl("Pilot", raw_files)]
opts <- options(warn=2)  # convert warnings to errors, while reading in files
for (fname in raw_files) {
## skip=1 because first row of each file is a timestamp
df_tmp <- tryCatch(read.csv(file.path(data_dir, fname)),
error=function(e) {print(paste("skipping", fname,
conditionMessage(e))); e})
if(inherits(df_tmp, "error")) next
## only keep complete blocks
if(dim(df_tmp)[1] == 50) {
## get the timestamp
date_str <- str_split(fname, "_|-|\\.")[[1]][2]
df_tmp$psych_date <- as.Date(date_str, "%Y%m%d")
time_str <- str_split(fname, "_|-|\\.")[[1]][3]
df_tmp$time <- as.numeric(time_str)
# Get the
## concatenate with other files
response_df <- rbind(response_df, df_tmp)
} else {
print(paste("skipping", fname, "(incomplete block)"))
}
}
gewtd()
getwd()
setwd("../Parametric/Motion")
response_df <- data.frame()
data_dir <- file.path("Exp", "Data")
raw_files <- list.files(path=data_dir)
raw_files <- raw_files[!grepl("Motion", raw_files)]
raw_files <- raw_files[!grepl("nnn", raw_files)]
raw_files <- raw_files[!grepl(".mat", raw_files)]
raw_files <- raw_files[!grepl("HDDM", raw_files)]
raw_files <- raw_files[!grepl("Pilot", raw_files)]
opts <- options(warn=2)  # convert warnings to errors, while reading in files
for (fname in raw_files) {
## skip=1 because first row of each file is a timestamp
df_tmp <- tryCatch(read.csv(file.path(data_dir, fname)),
error=function(e) {print(paste("skipping", fname,
conditionMessage(e))); e})
if(inherits(df_tmp, "error")) next
## only keep complete blocks
if(dim(df_tmp)[1] == 50) {
## get the timestamp
date_str <- str_split(fname, "_|-|\\.")[[1]][2]
df_tmp$psych_date <- as.Date(date_str, "%Y%m%d")
time_str <- str_split(fname, "_|-|\\.")[[1]][3]
df_tmp$time <- as.numeric(time_str)
# Get the
## concatenate with other files
response_df <- rbind(response_df, df_tmp)
} else {
print(paste("skipping", fname, "(incomplete block)"))
}
}
options(opts)  # restore default options
colnames(response_df) <- c("subj_idx", "trial", "stim", "direction","response", "rt","psych_date","timestamp")
response_df$timestamp <- as.numeric(response_df$timestamp)
response_df$stim <- 100*response_df$stim
response_df = as.data.frame(sapply(response_df, toupper))
response_df$subj_idx <- gsub("GB240", "HB240",response_df$subj_idx )
response_df$subj_idx <- gsub("GB241", "KB241",response_df$subj_idx )
response_df$subj_idx <- gsub("KB578", "JB578",response_df$subj_idx )
response_df <- response_df %>%
subset(!(subj_idx == "HC896" & timestamp %in% c("958","954","949")))
get_block <- function(sub){
x_unique <- unique(sub$timestamp)
x_ranks <- rank(x_unique)
sub$block <- x_ranks[match(sub$timestamp,x_unique)]
return(sub)
}
response_df <- response_df %>%
group_by(subj_idx) %>%
do(., get_block(.))
response_df$rt <- as.numeric(levels(response_df$rt))[response_df$rt]
response_df$response <- as.numeric(levels(response_df$response))[response_df$response]
response_df$block_id = paste0(response_df$subj_idx,"_", response_df$block)
is_incomplete <- response_df %>%
group_by(subj_idx)%>%
summarise(num_blocks = max(block))%>%
subset(num_blocks < 3) %>%
select(subj_idx)
response_df <- filter(response_df, !(subj_idx %in% is_incomplete$subj_idx ))
response_df <- filter(response_df, rt != "NA" & response != "NA")
repository_df <- read.csv("../RDRPRepository_DATA_2018-06-11_1011.csv")
is_incomplete <- response_df %>%
group_by(subj_idx)%>%
summarise(num_blocks = max(block))%>%
subset(num_blocks < 3) %>%
select(subj_idx)
is_incomplete <- response_df %>%
group_by(subj_idx)%>%
summarise(num_blocks = max(block))%>%
subset(num_blocks < 3)
response_df <- filter(response_df, !(subj_idx %in% is_incomplete$subj_idx ))
response_df <- filter(response_df, rt != "NA" & response != "NA")
repository_df <- read.csv("../RDRPRepository_DATA_2018-06-11_1011.csv")
registry_df <- read.csv("../RDRPRegistry_DATA_2018-06-11_1012.csv")
demog_df <- merge(repository_df, registry_df, by = "record_id")
record_ids <- demog_df %>% filter(sid.x %in% response_df$subj_idx) %>% select(record_id)
subject_df <- demog_df %>% filter(record_id %in% record_ids$record_id)
names <- colnames(demog_df)
record_ids <- demog_df %>% filter(sid.x %in% response_df$subj_idx) %>% select(record_id)
record_ids
library(dplyr)
library(tidyr)
library(stringr)
record_ids <- demog_df %>% filter(sid.x %in% response_df$subj_idx) %>% select(record_id)
record_ids <- demog_df %>% filter(sid.x %in% response_df$subj_idx)
subject_df <- demog_df %>% filter(record_id %in% record_ids$record_id)
names <- colnames(demog_df)
wj_cols <- c("wj_brs","wj_wa_ss","wj_lwid_ss")
ctopp_cols <- c("ctopp_pa","ctopp_rapid","ctopp_pm")
twre_cols <- c("twre_index","twre_pde_ss","twre_swe_ss")
wasi_cols <- c("wasi_fs2", "wasi_mr_ts")
reading_columns <- c("record_id", "dys_dx", "adhd_dx", "brain_injury", "aud_dis",
"psych_dx", wj_cols, ctopp_cols, twre_cols, wasi_cols)
reading_df <- subject_df %>% select(reading_columns)
